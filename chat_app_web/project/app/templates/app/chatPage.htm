<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chat Room</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <style>
      
      :root {
        --primary-color: #0b1e3f;
        --accent-color: #ffcc00;
        --background-color: #f9fafc;
        --bubble-sent: #0b1e3f;
        --bubble-received: #f1f5f9;
        --text-color: #1a202c;
        --muted-text: #64748b;
      }

      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }

      body {
        font-family: 'Poppins', sans-serif;
        background: var(--background-color);
        color: var(--text-color);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        margin : 0;
      }

      .container {
        display : flex;
        flex-direction: column;
        justify-content: space-between;
        max-width: 800px;
        height : 100dvh;
        margin: 0 auto;
        background: #ffffff;
        border-radius: 1rem 1rem 0 0;
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.07);lex;
        padding: 1.5rem;
        position: relative;
      }

      .chat__item__container {
        flex: 1;
        max-height: 500px;
        overflow-y: auto;
        padding: 1rem;
        background: #f1f5f9;
        border-radius: 1rem;
        margin-bottom: 1.25rem;
        scrollbar-width: thin;
        scrollbar-color: var(--accent-color) transparent;
      }

      .chat__item__container::-webkit-scrollbar {
        width: 6px;
      }

      .chat__item__container::-webkit-scrollbar-thumb {
        background: var(--accent-color);
        border-radius: 10px;
      }

      .input-container {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
        align-items: center;
      }

      input[type="text"] {
        flex: 1;
        padding: 0.8rem 1rem;
        border: 1px solid #cbd5e1;
        border-radius: 0.75rem;
        font-size: 0.95rem;
        outline: none;
        transition: border 0.3s, box-shadow 0.3s;
      }

      input[type="text"]:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(255, 204, 0, 0.2);
      }

      .file-upload-label {
        background: var(--accent-color);
        color: var(--primary-color);
        font-weight: 600;
        padding: 0.75rem 1rem;
        border-radius: 0.75rem;
        cursor: pointer;
        font-size: 0.95rem;
        transition: background 0.3s;
      }

      .file-upload-label:hover {
        background: #ffd84d;
      }
      .file-message {
  display: block;
  margin-top: 5px;
  color: #007bff;
  text-decoration: none;
}

.file-message-name {
  margin-left: 5px;
}

.file-message:hover {
  text-decoration: underline;
}


      #id_file_input {
        display: none;
      }

      button {
        background: var(--primary-color);
        color: white;
        padding: 0.8rem 1.5rem;
        border: none;
        font-size: 0.95rem;
        border-radius: 0.75rem;
        cursor: pointer;
        transition: background 0.3s;
      }

      button:hover {
        background: #132c5c;
      }

      .message-container {
        display: flex;
        margin-bottom: 1rem;
        margin-right : 0rem;

      }

      .message-container.sent {
        justify-content: flex-end;
      }

      .message {
        max-width: 70%;
        padding: 0.75rem 1.25rem;
        border-radius: 1rem;
        position: relative;
        background: var(--bubble-received);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
        transition: transform 0.2s;
      }

      .message.sent {
        background: var(--bubble-sent);
        color: white;
      }

      .message:hover {
        transform: scale(1.02);
      }

      .message strong {
        font-size: 0.85rem;
      }

      .message-content {
        margin: 0.4rem 0;
        font-size: 0.95rem;
      }

      .timestamp {
        font-size: 0.7rem;
        text-align: right;
        color: var(--muted-text);
      }

      .message.sent .timestamp {
        color: rgba(255, 255, 255, 0.7);
      }

      .modal {
        display: none;
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.65);
        justify-content: center;
        align-items: center;
        z-index: 999;
      }

      .modal-content {
        background: white;
        padding: 2rem;
        border-radius: 1rem;
        width: 90%;
        max-width: 500px;
        position: relative;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.25);
        animation: slideIn 0.3s ease;
      }

      .modal-close {
        position: absolute;
        top: 1rem;
        right: 1.25rem;
        font-size: 1.5rem;
        color: var(--accent-color);
        cursor: pointer;
      }

      .modal-message {
        font-size: 1rem;
        white-space: pre-wrap;
        line-height: 1.5;
        color: var(--text-color);
      }

      .home-button {
        position: absolute;
        top: 1.5rem;
        left: 1.5rem;
        background: var(--accent-color);
        color: var(--primary-color);
  font-weight: 400;          /* Semi-bold for emphasis */
  text-align: center;        /* Center the title inside sidebar */
  color: #333;               /* Dark gray text for better readability */
  padding: 0.75rem 1rem;     /* Vertical and horizontal spacing */
  border-bottom: 2px solid #ddd;  /* Subtle separator line */
  margin-bottom: 1rem;       /* Space below the title */
  border-radius: 6px 6px 4px 4px; /* Rounded top corners for a clean card look */
      }

      .home-button:hover {
        background: #ffd84d;
      }

      @keyframes slideIn {
        from {
          transform: translateY(-20px);
          opacity: 0;
        }
        to {
          transform: translateY(0);
          opacity: 1;
        }
      }
@media (max-width: 768px) {
  .container {
    margin: 1rem;
    padding: 1rem;
    width: 100%;
    box-shadow: none;
    border-radius: 0.5rem;
  }

  .chat__item__container {
    max-height: 400px;
    padding: 0.75rem;
  }

  .message {
    max-width: 85%;
    font-size: 0.85rem;
  }

  .message-content {
    font-size: 0.85rem;
  }

  .timestamp {
    font-size: 0.65rem;
  }

  .input-container {
    flex-wrap: nowrap; /* prevent wrapping unless necessary */
    flex-direction: row; /* keep input, attach, and button inline */
    align-items: center;
    gap: 0.5rem;
  }

  input[type="text"],
  button,
  .file-upload-label {
    font-size: 0.85rem;
  }

  input[type="text"] {
    flex: 1;
    min-width: 0;
  }

  .file-upload-label {
    white-space: nowrap;
  }

  button {
    white-space: nowrap;
  }

  .home-button {
    position: static;
    width: auto;
    text-align: left;
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }

  .modal-content {
    width: 95%;
    padding: 1.5rem;
  }

  .modal-message {
    font-size: 0.9rem;
  }
}

    </style>
  </head>

  <body>
    <div class="container">
      <a href="/index" class="home-button">‚Üê  </a>
      <div class="chat__item__container" id="id_chat_item_container"></div>

      <div class="input-container">
        <label for="id_file_input" class="file-upload-label">üìé Attach</label>
        <input type="file" id="id_file_input" />
        <input type="text" id="id_message_send_input" placeholder="Type your message..." />
        <button id="id_message_send_button">Send</button>
      </div>
    </div>

    <div class="modal" id="modal">
      <div class="modal-content">
        <span class="modal-close" id="modal-close">&times;</span>
        <div class="modal-message" id="modal-message"></div>
      </div>
    </div>

   <script>
  document.addEventListener("DOMContentLoaded", () => {
    const protocol = window.location.protocol === "https:" ? "wss" : "ws";
    const chatSocket = new WebSocket(protocol + "://" + window.location.host + "/ws/chat/");

    const inputElem = document.getElementById("id_message_send_input");
    const sendButton = document.getElementById("id_message_send_button");
    const fileInput = document.getElementById("id_file_input");
    const chatContainer = document.getElementById("id_chat_item_container");

    const currentUser = "{{ request.user.username }}";
    let selectedFile = null;

    chatSocket.onopen = () => console.log("Connected to WebSocket");
    chatSocket.onclose = () => console.log("Disconnected from WebSocket");

    inputElem.focus();

    inputElem.onkeyup = function (e) {
      if (e.key === "Enter") {
        sendButton.click();
      }
    };

    fileInput.addEventListener("change", function () {
      if (fileInput.files.length > 0) {
        selectedFile = fileInput.files[0];
      }
    });

    sendButton.onclick = function () {
      const message = inputElem.value.trim();
      if (!message && !selectedFile) return;

      if (selectedFile) {
        const reader = new FileReader();
        reader.onload = function (e) {
          const fileDataUrl = e.target.result;
          chatSocket.send(
            JSON.stringify({
              message: message || "",
              username: currentUser,
              timestamp: new Date().toISOString(),
              file: fileDataUrl,
              filename: selectedFile.name
            })
          );
          inputElem.value = "";
          selectedFile = null;
          fileInput.value = ""; // Reset file input
        };
        reader.readAsDataURL(selectedFile);
      } else {
        chatSocket.send(
          JSON.stringify({
            message: message,
            username: currentUser,
            timestamp: new Date().toISOString()
          })
        );
        inputElem.value = "";
      }
    };

    chatSocket.onmessage = function (e) {
      const data = JSON.parse(e.data);
      const isSent = data.username === currentUser;

      const msgContainer = document.createElement("div");
      msgContainer.className = "message-container" + (isSent ? " sent" : "");

      const msgBubble = document.createElement("div");
      msgBubble.className = "message" + (isSent ? " sent" : "");
      msgBubble.onclick = () => {
        if (data.message) showFullMessage(data.message);
      };

      let innerHTML = `<strong>${sanitize(data.username)}</strong>`;


      if (data.file && data.filename) {
        innerHTML += `
          <a href="${data.file}" download="${sanitize(data.filename)}" class="file-message">
            <i class="fas fa-file"></i>
            <span class="file-message-name">${sanitize(data.filename)}</span>
          </a>
        `;
      }

      if (data.message) {
        innerHTML += `<div class="message-content">${sanitize(data.message)}</div>`;
      }

      innerHTML += `<div class="timestamp">${formatTime(data.timestamp)}</div>`;
      msgBubble.innerHTML = innerHTML;

      msgContainer.appendChild(msgBubble);
      chatContainer.appendChild(msgContainer);

      msgBubble.scrollIntoView({ behavior: "smooth" });
    };

    function formatTime(timestamp) {
      const date = new Date(timestamp);
      const now = new Date();
      const today = now.toDateString();
      const yesterday = new Date(now.setDate(now.getDate() - 1)).toDateString();

      const options = { hour: "numeric", minute: "numeric", hour12: true };
      if (date.toDateString() === today) return `Today, ${date.toLocaleTimeString([], options)}`;
      if (date.toDateString() === yesterday) return `Yesterday, ${date.toLocaleTimeString([], options)}`;
      return `${date.toLocaleDateString([], { month: "short", day: "numeric" })}, ${date.toLocaleTimeString([], options)}`;
    }

    function sanitize(text) {
      const div = document.createElement("div");
      div.textContent = text;
      return div.innerHTML;
    }

    function showFullMessage(message) {
      document.getElementById("modal-message").textContent = message;
      document.getElementById("modal").style.display = "flex";
    }

    document.getElementById("modal-close").onclick = () => {
      document.getElementById("modal").style.display = "none";
    };

    window.onclick = (event) => {
      const modal = document.getElementById("modal");
      if (event.target === modal) {
        modal.style.display = "none";
      }
    };
  });
</script>

  </body>
</html>